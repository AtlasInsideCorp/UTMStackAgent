// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: agent.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentServiceClient interface {
	RegisterAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error)
	AgentStream(ctx context.Context, opts ...grpc.CallOption) (AgentService_AgentStreamClient, error)
	DeleteAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error)
	Ping(ctx context.Context, opts ...grpc.CallOption) (AgentService_PingClient, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) RegisterAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error) {
	out := new(AgentResponse)
	err := c.cc.Invoke(ctx, "/agent.AgentService/RegisterAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentStream(ctx context.Context, opts ...grpc.CallOption) (AgentService_AgentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[0], "/agent.AgentService/AgentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentServiceAgentStreamClient{stream}
	return x, nil
}

type AgentService_AgentStreamClient interface {
	Send(*BidirectionalStream) error
	Recv() (*BidirectionalStream, error)
	grpc.ClientStream
}

type agentServiceAgentStreamClient struct {
	grpc.ClientStream
}

func (x *agentServiceAgentStreamClient) Send(m *BidirectionalStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentServiceAgentStreamClient) Recv() (*BidirectionalStream, error) {
	m := new(BidirectionalStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentServiceClient) DeleteAgent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error) {
	out := new(AgentResponse)
	err := c.cc.Invoke(ctx, "/agent.AgentService/DeleteAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) Ping(ctx context.Context, opts ...grpc.CallOption) (AgentService_PingClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[1], "/agent.AgentService/Ping", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentServicePingClient{stream}
	return x, nil
}

type AgentService_PingClient interface {
	Send(*PingResponse) error
	Recv() (*PingRequest, error)
	grpc.ClientStream
}

type agentServicePingClient struct {
	grpc.ClientStream
}

func (x *agentServicePingClient) Send(m *PingResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentServicePingClient) Recv() (*PingRequest, error) {
	m := new(PingRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations must embed UnimplementedAgentServiceServer
// for forward compatibility
type AgentServiceServer interface {
	RegisterAgent(context.Context, *AgentRequest) (*AgentResponse, error)
	AgentStream(AgentService_AgentStreamServer) error
	DeleteAgent(context.Context, *AgentRequest) (*AgentResponse, error)
	Ping(AgentService_PingServer) error
	mustEmbedUnimplementedAgentServiceServer()
}

// UnimplementedAgentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServiceServer struct {
}

func (UnimplementedAgentServiceServer) RegisterAgent(context.Context, *AgentRequest) (*AgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAgent not implemented")
}
func (UnimplementedAgentServiceServer) AgentStream(AgentService_AgentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AgentStream not implemented")
}
func (UnimplementedAgentServiceServer) DeleteAgent(context.Context, *AgentRequest) (*AgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgent not implemented")
}
func (UnimplementedAgentServiceServer) Ping(AgentService_PingServer) error {
	return status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_RegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).RegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.AgentService/RegisterAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).RegisterAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServiceServer).AgentStream(&agentServiceAgentStreamServer{stream})
}

type AgentService_AgentStreamServer interface {
	Send(*BidirectionalStream) error
	Recv() (*BidirectionalStream, error)
	grpc.ServerStream
}

type agentServiceAgentStreamServer struct {
	grpc.ServerStream
}

func (x *agentServiceAgentStreamServer) Send(m *BidirectionalStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentServiceAgentStreamServer) Recv() (*BidirectionalStream, error) {
	m := new(BidirectionalStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AgentService_DeleteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).DeleteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.AgentService/DeleteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).DeleteAgent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_Ping_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServiceServer).Ping(&agentServicePingServer{stream})
}

type AgentService_PingServer interface {
	Send(*PingRequest) error
	Recv() (*PingResponse, error)
	grpc.ServerStream
}

type agentServicePingServer struct {
	grpc.ServerStream
}

func (x *agentServicePingServer) Send(m *PingRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentServicePingServer) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAgent",
			Handler:    _AgentService_RegisterAgent_Handler,
		},
		{
			MethodName: "DeleteAgent",
			Handler:    _AgentService_DeleteAgent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AgentStream",
			Handler:       _AgentService_AgentStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Ping",
			Handler:       _AgentService_Ping_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "agent.proto",
}

// PanelServiceClient is the client API for PanelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PanelServiceClient interface {
	ProcessCommand(ctx context.Context, opts ...grpc.CallOption) (PanelService_ProcessCommandClient, error)
}

type panelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPanelServiceClient(cc grpc.ClientConnInterface) PanelServiceClient {
	return &panelServiceClient{cc}
}

func (c *panelServiceClient) ProcessCommand(ctx context.Context, opts ...grpc.CallOption) (PanelService_ProcessCommandClient, error) {
	stream, err := c.cc.NewStream(ctx, &PanelService_ServiceDesc.Streams[0], "/agent.PanelService/ProcessCommand", opts...)
	if err != nil {
		return nil, err
	}
	x := &panelServiceProcessCommandClient{stream}
	return x, nil
}

type PanelService_ProcessCommandClient interface {
	Send(*UtmCommand) error
	Recv() (*CommandResult, error)
	grpc.ClientStream
}

type panelServiceProcessCommandClient struct {
	grpc.ClientStream
}

func (x *panelServiceProcessCommandClient) Send(m *UtmCommand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *panelServiceProcessCommandClient) Recv() (*CommandResult, error) {
	m := new(CommandResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PanelServiceServer is the server API for PanelService service.
// All implementations must embed UnimplementedPanelServiceServer
// for forward compatibility
type PanelServiceServer interface {
	ProcessCommand(PanelService_ProcessCommandServer) error
	mustEmbedUnimplementedPanelServiceServer()
}

// UnimplementedPanelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPanelServiceServer struct {
}

func (UnimplementedPanelServiceServer) ProcessCommand(PanelService_ProcessCommandServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessCommand not implemented")
}
func (UnimplementedPanelServiceServer) mustEmbedUnimplementedPanelServiceServer() {}

// UnsafePanelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PanelServiceServer will
// result in compilation errors.
type UnsafePanelServiceServer interface {
	mustEmbedUnimplementedPanelServiceServer()
}

func RegisterPanelServiceServer(s grpc.ServiceRegistrar, srv PanelServiceServer) {
	s.RegisterService(&PanelService_ServiceDesc, srv)
}

func _PanelService_ProcessCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PanelServiceServer).ProcessCommand(&panelServiceProcessCommandServer{stream})
}

type PanelService_ProcessCommandServer interface {
	Send(*CommandResult) error
	Recv() (*UtmCommand, error)
	grpc.ServerStream
}

type panelServiceProcessCommandServer struct {
	grpc.ServerStream
}

func (x *panelServiceProcessCommandServer) Send(m *CommandResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *panelServiceProcessCommandServer) Recv() (*UtmCommand, error) {
	m := new(UtmCommand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PanelService_ServiceDesc is the grpc.ServiceDesc for PanelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PanelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.PanelService",
	HandlerType: (*PanelServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessCommand",
			Handler:       _PanelService_ProcessCommand_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "agent.proto",
}
